// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using demo_hard.Models;

#nullable disable

namespace demo_hard.Migrations
{
    [DbContext(typeof(User15Context))]
    partial class User15ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OrderService", b =>
                {
                    b.Property<int>("OrdersOrderId")
                        .HasColumnType("integer");

                    b.Property<int>("ServicesServiceId")
                        .HasColumnType("integer");

                    b.HasKey("OrdersOrderId", "ServicesServiceId");

                    b.HasIndex("ServicesServiceId");

                    b.ToTable("OrderService");
                });

            modelBuilder.Entity("demo_hard.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("ClientId"));

                    b.Property<string>("Address")
                        .HasColumnType("character varying")
                        .HasColumnName("address");

                    b.Property<DateOnly?>("Birthday")
                        .HasColumnType("date")
                        .HasColumnName("birthday");

                    b.Property<int?>("ClientCode")
                        .HasColumnType("integer")
                        .HasColumnName("client_code");

                    b.Property<string>("Email")
                        .HasColumnType("character varying")
                        .HasColumnName("email");

                    b.Property<string>("Fio")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("fio");

                    b.Property<string>("Passport")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("passport");

                    b.Property<string>("Password")
                        .HasColumnType("character varying")
                        .HasColumnName("password");

                    b.Property<int?>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.HasKey("ClientId")
                        .HasName("client_pk");

                    b.HasIndex(new[] { "ClientCode" }, "client_unique")
                        .IsUnique();

                    b.ToTable("client", (string)null);
                });

            modelBuilder.Entity("demo_hard.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("EnterStatus")
                        .HasColumnType("character varying")
                        .HasColumnName("enter_status");

                    b.Property<string>("Fio")
                        .HasColumnType("character varying")
                        .HasColumnName("fio");

                    b.Property<DateTime?>("LastEnter")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_enter");

                    b.Property<string>("Login")
                        .HasColumnType("character varying")
                        .HasColumnName("login");

                    b.Property<string>("Password")
                        .HasColumnType("character varying")
                        .HasColumnName("password");

                    b.Property<string>("Photo")
                        .HasColumnType("character varying")
                        .HasColumnName("photo");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("employees_pk");

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("demo_hard.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("OrderId"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("OrderCode")
                        .HasColumnType("character varying")
                        .HasColumnName("order_code");

                    b.Property<int?>("RentTime")
                        .HasColumnType("integer")
                        .HasColumnName("rent_time");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .HasColumnType("character varying")
                        .HasColumnName("status");

                    b.Property<TimeOnly?>("Time")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time");

                    b.HasKey("OrderId")
                        .HasName("orders_pk");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("demo_hard.Models.OrderService", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer")
                        .HasColumnName("service_id");

                    b.Property<int>("RentTime")
                        .HasColumnType("integer")
                        .HasColumnName("rent_time");

                    b.HasKey("OrderId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("order_services", (string)null);
                });

            modelBuilder.Entity("demo_hard.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<string>("RoleName")
                        .HasColumnType("character varying")
                        .HasColumnName("role_name");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("demo_hard.Models.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .HasColumnType("integer")
                        .HasColumnName("service_id");

                    b.Property<int?>("CostPerHour")
                        .HasColumnType("integer")
                        .HasColumnName("cost_per_hour");

                    b.Property<string>("ServiceCode")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("service_code");

                    b.Property<string>("ServiceName")
                        .HasColumnType("character varying")
                        .HasColumnName("service_name");

                    b.HasKey("ServiceId")
                        .HasName("services_pk");

                    b.HasIndex(new[] { "ServiceCode" }, "services_unique")
                        .IsUnique();

                    b.ToTable("services", (string)null);
                });

            modelBuilder.Entity("OrderService", b =>
                {
                    b.HasOne("demo_hard.Models.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("demo_hard.Models.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("demo_hard.Models.OrderService", b =>
                {
                    b.HasOne("demo_hard.Models.Order", "Order")
                        .WithMany("OrderServices")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("order_services_order_id_fkey");

                    b.HasOne("demo_hard.Models.Service", "Service")
                        .WithMany("OrderServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("order_services_service_id_fkey");

                    b.Navigation("Order");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("demo_hard.Models.Order", b =>
                {
                    b.Navigation("OrderServices");
                });

            modelBuilder.Entity("demo_hard.Models.Service", b =>
                {
                    b.Navigation("OrderServices");
                });
#pragma warning restore 612, 618
        }
    }
}
